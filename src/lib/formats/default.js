const { fmtTime } = require('../helpers')

function needsZeroSub (flag, index, timeStart) {
  return flag && index === 0 && timeStart !== '00:00:00,000'
}

function addZeroSub (timeStart) {
  return `1\n00:00:00,000 --> ${timeStart}\nAutomatically generated by moneypenny\n\n`
}

function encodeResult ({ results }, forceSubAtZero) {
  return results
    .reduce((acc, curr) => {
      const { alternatives } = curr
      if (!Array.isArray(alternatives) || alternatives.length === 0) return acc

      const { transcript, words } = alternatives[0]
      if (!transcript || !Array.isArray(words) || !words[0]) return acc

      const { text, index } = acc

      const firstWord = words[0]
      const lastWord = words[words.length - 1]

      const timeStart = fmtTime(firstWord.startTime)
      const timeEnd = fmtTime(lastWord.endTime)

      // When `forceSubAtZero` is set, we need to prepend an empty sub ranging from 0 to startTime
      // and adjust indezes
      const isZeroSub = needsZeroSub(forceSubAtZero, index, timeStart)
      const currentIndex = isZeroSub ? 2 : index + 1

      const passage = `${currentIndex}\n${timeStart} --> ${timeEnd}\n${transcript.trim()}`

      // 1. When not the first passage
      if (text) {
        return { text: `${text}\n\n${passage}`, index: currentIndex }
      }

      // 2. When zero sub is not forced or first timestamp is `00:00:00,000`
      if (!isZeroSub) {
        return { text: passage, index: currentIndex }
      }

      // 3. When zero sub is forced and needs to be added
      return {
        text: `${addZeroSub(timeStart)}${passage}`,
        index: currentIndex
      }
    }, { index: 0, text: '' })
}

function encodeDiarizedResult ({ results }, forceSubAtZero) {
  const lastResult = results[results.length - 1]
  const { words } = lastResult.alternatives[0]

  const res = words
    .reduce((acc, curr, i, arr) => {
      const {
        content,
        index,
        lastEndTime,
        lastSpeakerTag,
        passage
      } = acc
      const { speakerTag, word } = curr

      const nextAcc = {
        lastEndTime: curr.endTime,
        lastSpeakerTag: speakerTag
      }

      const hasSpeakerChanged = lastSpeakerTag !== speakerTag

      if (!hasSpeakerChanged) {
        return {
          ...nextAcc,
          index: index,
          content: content,
          passage: `${passage} ${word}`
        }
      }

      // When `forceSubAtZero` is set, we need to prepend an empty sub ranging from 0 to startTime
      // and adjust indezes
      const isZeroSub = needsZeroSub(forceSubAtZero, i, curr.startTime)
      const currentIndex = isZeroSub ? index + 1 : index

      const prevToken = `${content}${fmtTime(lastEndTime)}\n${passage}`
      const nextToken = `${currentIndex}\n${fmtTime(curr.startTime)} --> `

      let nextContent

      if (i === 0) {
        nextContent = isZeroSub
          ? `${addZeroSub(fmtTime(curr.startTime))}${nextToken}`
          : nextToken
      } else if (i === arr.length - 1) {
        nextContent = prevToken
      } else {
        nextContent = `${prevToken}\n\n${nextToken}`
      }

      return {
        ...nextAcc,
        index: currentIndex + 1,
        content: nextContent,
        passage: `[Speaker ${speakerTag}] ${word}`
      }
    }, {
      passage: '',
      content: '',
      index: 1,
      lastEndTime: null,
      lastSpeakerTag: null
    })

  return res.content
}

module.exports = {
  encodeResult, encodeDiarizedResult
}
